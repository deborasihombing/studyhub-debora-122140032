<<<<<<< HEAD


# ===============================================
# Python / Backend Specific
# ===============================================

# Virtual Environment (sesuaikan nama jika berbeda)
managebook_env/

# Python cache dan bytecode files
__pycache__/
*.py[cod]
*$py.class

# Build artifacts backend (jika ada)
# backend/build/
# backend/dist/

# Test coverage
.coverage
coverage.xml
htmlcov/
.pytest_cache/

# Database files (jika menggunakan SQLite untuk development lokal)
*.sqlite
*.sqlite3
*.db
*.db-journal # Untuk SQLite

# File spesifik Jupyter Notebook jika digunakan
.ipynb_checkpoints

# ===============================================
# Node.js / Frontend Specific
# ===============================================

# Dependency directory (akan mengabaikan semua folder node_modules)
node_modules/

# Build artifacts frontend (jika ada, Vite biasanya membuat 'dist')
# frontend/dist/
# frontend/build/
# .next/ # Jika menggunakan Next.js
# .nuxt/ # Jika menggunakan Nuxt.js

# Log files dari package managers frontend
=======
# ===============================================
# Global ignores (applies to the entire monorepo)
# ===============================================

# Logs
logs/
*.log
>>>>>>> ae07752ed7b289091b74b3eb1ae231b550ccb973
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

<<<<<<< HEAD
# ===============================================
# File Upload dan Konten Buatan Pengguna
# ===============================================
# Direktori ini biasanya berisi file yang diupload saat runtime
# dan tidak seharusnya menjadi bagian dari source code.
# Sesuaikan path ini jika direktori upload Anda berbeda.
# Contoh:
# backend/static/covers/ # Jika Anda tidak ingin contoh cover masuk ke repo
# backend/static/profile_pics/ # Jika Anda tidak ingin contoh foto profil masuk ke repo
# uploads/
# media/

# ===============================================
# Global / OS / Editor / IDE Ignores
# ===============================================

# File environment variables (SANGAT PENTING untuk diabaikan)
.env
.env.*
!.env.example # Anda mungkin ingin menyertakan file contoh .env

# Log umum
logs/
*.log

# File spesifik Sistem Operasi
.DS_Store
Thumbs.db
._*

# File spesifik Editor/IDE
.vscode/
!.vscode/settings.json # Anda mungkin ingin mempertahankan ini untuk konsistensi tim
!.vscode/extensions.json # Anda mungkin ingin mempertahankan ini untuk konsistensi tim
.idea/
*.sublime-project
*.sublime-workspace
*.project
*.classpath
*.cpr
*.launch
nbproject/ # NetBeans
*.bak
*.tmp
*.swp
*~

# Build artifacts umum (bisa juga mencakup output backend/frontend)
build/
dist/

# Laporan coverage umum
coverage/

# ===============================================
# File Lock Dependensi - PENTING: Biasanya DIKOMITMEN!
# ===============================================
# File lock (package-lock.json, yarn.lock, poetry.lock, Pipfile.lock)
# membantu memastikan instalasi dependensi yang konsisten di berbagai lingkungan.
# Sebaiknya Anda HANYA MENGGUNAKAN SATU JENIS package manager per proyek (npm, yarn, atau pnpm untuk frontend)
# dan MENGKOMITMEN file lock yang sesuai. Jangan abaikan file lock utama Anda.

# Baris di bawah ini adalah contoh jika Anda secara eksplisit ingin mengabaikan file lock
# dari package manager lain yang tidak sengaja terbuat. Ini jarang diperlukan jika tim disiplin.
# yarn.lock
# pnpm-lock.yaml
# package-lock.json # Abaikan jika Anda menggunakan yarn atau pnpm secara eksklusif

# Untuk backend Python, jika menggunakan Poetry atau Pipenv:
# poetry.lock
# Pipfile.lock
# (requirements.txt biasanya dikomitmen, bukan diabaikan)
=======
# Dependency directories
# Ignoring node_modules at the root will ignore it in all subdirectories
# unless explicitly un-ignored later (not recommended for node_modules)
node_modules/
# If you use a single node_modules at the root for a workspace setup,
# you might want to keep the root node_modules, but ignore sub-project ones.
# In a typical monorepo, it's often best to ignore all node_modules unless specific needs arise.

# Build artifacts
# These patterns will match 'dist' and 'build' folders anywhere in the repo
dist/
build/
coverage/ # Common for test coverage reports

# Editor and OS specific files
.vscode/
!.vscode/extensions.json # Keep this file if it's important for team consistency
.idea/
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
Thumbs.db
.cache/
.env # Environment variables (highly recommended to ignore)
.env.* # All environment variables (e.g., .env.development, .env.production)

# ===============================================
# Frontend Specific (adjust paths as needed)
# ===============================================

# If your frontend is in a 'frontend/' subdirectory:
frontend/dist-ssr/
frontend/*.local # Frontend specific local files

# If you need to ignore specific things inside frontend/node_modules
# but you want to allow global node_modules (unlikely for frontend)
# frontend/node_modules/

# ===============================================
# Backend Specific (add if you have a backend)
# ===============================================

# Assuming your backend is in a 'backend/' subdirectory
backend/dist/
backend/build/ # For compiled code, e.g., Java .class files, Python .pyc
backend/__pycache__/ # Python specific
backend/*.pyc # Python specific
backend/target/ # Java Maven build output

# Database related files (adjust paths as needed)
*.sqlite
*.sqlite3
*.db
*.sqlitedb
data.db # Example for common local database files

# Uploaded files or user-generated content (important for production)
uploads/
media/

# ===============================================
# Configuration files (if they contain sensitive info or are generated)
# ===============================================
package-lock.json # If you prefer to use yarn.lock or pnpm-lock.yaml instead, or if it's generated by CI
yarn.lock # If you prefer to use package-lock.json
pnpm-lock.yaml # If you prefer to use package-lock.json or yarn.lock

# Optional: If you manage multiple lock files, you might only ignore the ones you don't use
# Example: If you use package-lock.json, you might ignore yarn.lock and pnpm-lock.yaml
# yarn.lock
# pnpm-lock.yaml

# Compiled files (e.g., for C++, Go, Rust)
*.o
*.obj
*.exe
*.dll
*.so
*.dylib
*.a

# IDE specific files (more general)
*.code-workspace
*.sublime-project
*.sublime-workspace
*.code-profile

# Other common temporary files
*.tmp
*.bak
*.swp
>>>>>>> ae07752ed7b289091b74b3eb1ae231b550ccb973
