# ===============================================
# Global ignores (applies to the entire monorepo)
# ===============================================

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Dependency directories
# Ignoring node_modules at the root will ignore it in all subdirectories
# unless explicitly un-ignored later (not recommended for node_modules)
node_modules/
# If you use a single node_modules at the root for a workspace setup,
# you might want to keep the root node_modules, but ignore sub-project ones.
# In a typical monorepo, it's often best to ignore all node_modules unless specific needs arise.

# Build artifacts
# These patterns will match 'dist' and 'build' folders anywhere in the repo
dist/
build/
coverage/ # Common for test coverage reports

# Editor and OS specific files
.vscode/
!.vscode/extensions.json # Keep this file if it's important for team consistency
.idea/
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
Thumbs.db
.cache/
.env # Environment variables (highly recommended to ignore)
.env.* # All environment variables (e.g., .env.development, .env.production)

# ===============================================
# Frontend Specific (adjust paths as needed)
# ===============================================

# If your frontend is in a 'frontend/' subdirectory:
frontend/dist-ssr/
frontend/*.local # Frontend specific local files

# If you need to ignore specific things inside frontend/node_modules
# but you want to allow global node_modules (unlikely for frontend)
# frontend/node_modules/

# ===============================================
# Backend Specific (add if you have a backend)
# ===============================================

# Assuming your backend is in a 'backend/' subdirectory
backend/dist/
backend/build/ # For compiled code, e.g., Java .class files, Python .pyc
backend/__pycache__/ # Python specific
backend/*.pyc # Python specific
backend/target/ # Java Maven build output

# Database related files (adjust paths as needed)
*.sqlite
*.sqlite3
*.db
*.sqlitedb
data.db # Example for common local database files

# Uploaded files or user-generated content (important for production)
uploads/
media/

# ===============================================
# Configuration files (if they contain sensitive info or are generated)
# ===============================================
package-lock.json # If you prefer to use yarn.lock or pnpm-lock.yaml instead, or if it's generated by CI
yarn.lock # If you prefer to use package-lock.json
pnpm-lock.yaml # If you prefer to use package-lock.json or yarn.lock

# Optional: If you manage multiple lock files, you might only ignore the ones you don't use
# Example: If you use package-lock.json, you might ignore yarn.lock and pnpm-lock.yaml
# yarn.lock
# pnpm-lock.yaml

# Compiled files (e.g., for C++, Go, Rust)
*.o
*.obj
*.exe
*.dll
*.so
*.dylib
*.a

# IDE specific files (more general)
*.code-workspace
*.sublime-project
*.sublime-workspace
*.code-profile

# Other common temporary files
*.tmp
*.bak
*.swp